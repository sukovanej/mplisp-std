; vim: syntax=mplisp
; Milan Suk 2018
; list package


; Get list length
; Usage: (list-len {list}) -> {list length}
(def list-len
    (lambda (l)
        (if (== l `()) 0
            (apply + (map (lambda (x) 1) l)))))

; TESTS
(assert-equal! (list-len `(1 2 3 4)) 4)
(assert-equal! (list-len `(1 2 4)) 3)
(assert-equal! (list-len `()) 0)
; /TESTS


; Check whether the {value} is in the {list}
; Usage: (list-in {list} {value})
(def list-in
    (lambda (l val)
        (apply or? (map (lambda (x) (== val x)) l))))

; TESTS
(assert! (list-in (list 1 2) 1))
(assert! (list-in (list 1 2) 2))
(assert! (not? (list-in (list 1 2) 3)))
; /TESTS


; Zip two lists
(def list-zip
    (lambda (l1 l2)
        (if (!= (list-len l1) (list-len l2)) 
            #f
            (map 
                (lambda (x) (list (list-ref l1 x) (list-ref l2 x))) 
                (range (list-len l1))))))
            
; TESTS
(assert-equal! (list-zip (list 1 2) (list 3 4)) (list (list 1 3) (list 2 4)))
(assert-equal! (list-zip `(1 2) `(3 4)) `((1 3) (2 4))) ; test with quote
; /TESTS

; Get index of element in list
(def list-get-index
    (lambda (l val)
        (let* ( 
            (zip-list (list-zip l (range (list-len l))))
            (filtered (filter (lambda (x) (== val (car x))) zip-list)))
                (map (lambda (x) (car (cdr x))) filtered))))


; TESTS
(assert-equal! (list-get-index `(1 2 3 2 4) 0) `())
(assert-equal! (list-get-index `(1 2 3 2 4) 1) `(0))
(assert-equal! (list-get-index `(1 2 3 2 4) 2) `(1 3))
(assert-equal! (list-get-index `(1 2 3 2 4) 3) `(2))
; /TESTS
